@using DeBroglie.Topo
@using DeBroglie.Models
@using DeBroglie

<Card>
    <CardHeader>
        <CardTitle>Game Entity Designer</CardTitle>
        <CardBody>
            @* Select Entity Type *@
            <Select @bind-SelectedValue="SelectedType" TValue="GameEntity.Type">
                <SelectGroup Label="Valid Entity Types">
                    <SelectItem Value="GameEntity.Type.Text">Text</SelectItem>
                    <SelectItem Value="GameEntity.Type.Sprite">Sprite</SelectItem>
                </SelectGroup>
            </Select>
            @switch (SelectedType)
            {
                case GameEntity.Type.Text:
                    <TextEdit @bind-Text="@_designerEntity.RenderTarget" />
                    break;

                case GameEntity.Type.Sprite:
                    <FileEdit Changed="OnLoadSprite" />
                    break;

                default:
                    <Badge Color="Color.Danger">Unknown Type</Badge>
                    break;
            }
            @* Text Entity Controls *@

        </CardBody>
        <CardFooter>
            <pre><Code>@JsonConvert.SerializeObject(_designerEntity, Formatting.Indented)</Code></pre>
        </CardFooter>
    </CardHeader>
</Card>

<Button Clicked="@(() => { WFCTest(); })">Test WFC</Button>
<pre>
    @Chars?.GetValue(0, 0) @Chars?.GetValue(0, 1) @Chars?.GetValue(0, 2)
    @Chars?.GetValue(1, 0) @Chars?.GetValue(1, 1) @Chars?.GetValue(1, 2)
    @Chars?.GetValue(2, 0) @Chars?.GetValue(2, 1) @Chars?.GetValue(2, 2)
</pre>




@code
{
    /// <summary>
    /// List of valid game entities
    /// </summary>
    [Parameter]
    public List<GameEntity?>? GameEntities { get; set; }

    /// <summary>
    /// Selected entity type currently being designed
    /// </summary>
    [Parameter]
    public GameEntity.Type SelectedType { get; set; }

    private GameEntity _designerEntity = new();

    private void GameObjectsChanged(string? gameObject)
    {
        GameEntities?.Add(_designerEntity);
    }

    private void OnLoadSprite(FileChangedEventArgs obj)
    {
        throw new NotImplementedException();
    }

    public static string[,] Chars { get; set; }

    //static string[,] Chars = new string[0, 0];

    private static ITopoArray<string> WFCTest()
    {
        ITopoArray<string> sample = DeBroglie.Topo.TopoArray.Create(new[]
        {
            new[] { "-", "-", "-" },
            new[] { "|", "+", "|" },
            new[] { "-", "-", "-" }
    }, periodic: false);

        var model = new AdjacentModel(sample.ToTiles());

        var topology = new GridTopology(3, 3, periodic: false);

        var propagator = new TilePropagator(model, topology);

        var status = propagator.Run();

        //if (status != Resolution.Decided) throw new Exception("Undecided");

        var output = propagator.ToValueArray<string>();

        Chars = output.ToArray2d();

        return output;
    }
}
